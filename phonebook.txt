import  java.io.FileNotFoundException;

import java.io.FileReader;

import java.io.IOException;

import java.util.LinkedList;

import java.util.Scanner;

import javafx.application.Application;

import static javafx.application.Application.launch;

import javafx.event.ActionEvent;

import javafx.event.EventHandler;

import javafx.geometry.Insets;

import javafx.geometry.Pos;

import javafx.scene.Scene;

import javafx.scene.control.Alert;

import javafx.scene.control.Alert.AlertType;

import javafx.scene.control.Button;

import javafx.scene.control.Label;

import javafx.scene.control.PasswordField;

import javafx.scene.control.TextArea;

import javafx.scene.control.TextField;

import javafx.scene.layout.GridPane;

import javafx.scene.layout.StackPane;

import javafx.scene.text.Font;

import javafx.scene.text.FontWeight;

import javafx.scene.text.Text;

import javafx.stage.Stage;

import javax.swing.JOptionPane;

class Record

{

private String fName;

 private String lName;

 private int idNumber;

 private int contactNumber;

public Record() {}

public Record(int idNumber, String fName, String lName, int contactNumber)

 {

  this.fName = fName;

  this.lName = lName;

  this.idNumber = idNumber;

  this.contactNumber = contactNumber;

 }



 public int getContactNumber() { return contactNumber; }

 public void setContactNumber(int contactNumber)

 {

  this.contactNumber = contactNumber;

 }

 public int getIdNumber() { return idNumber; }

 public void setIdNumber(int idNumber)

 {

  this.idNumber = idNumber;

 }

 public String getFirstName() { return fName; }

 public void setFirstName(String fName) { this.fName = fName; }

 public String getLastName() { return lName; }

 public void setLastName(String lName) { this.lName = lName; }

  public String toString()

 {

  return "Person Details {"

   + "First name=" + fName + ", Last name=" + lName + ", idNumber=" + idNumber

   + ", contactNumber=" + contactNumber + '}';

 }

}

class PersonRecordManagement

{

 LinkedList<Record> list;

public PersonRecordManagement()

 {

  list = new LinkedList<>();

 }

 public void add(Record record)

 {

  if (!find(record.getIdNumber())) {

   list.add(record);

  }

  else {

       Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.INFORMATION);

        a.setContentText("person id already exists in the Record list");

        a.show();

    }

 }

 public boolean find(int idNo)

 {



  for (Record l : list) {                             



   if (l.getIdNumber() == idNo)

   {

        Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.INFORMATION);

        a.setContentText(l.toString());

        a.show();

   // System.out.println(l);

    return true;

   }

  }

  return false;

 }

 public void delete(int idNo)

 {

  Record recordDel = null;



  for (Record ll : list) {

if (ll.getIdNumber() == idNo) {

    recordDel = ll;

   }

  }

  if (recordDel == null) {

        Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.ERROR);

        a.setContentText("Invalid person Id");

        a.show();

  }

  else {

   list.remove(recordDel);

   Alert a = new Alert(AlertType.NONE);

   a.setAlertType(AlertType.ERROR);

                a.setContentText("Successfully deleted the record");

                a.show();

 

  }

 }

 public Record findRecord(int idNumber)

 {

  for (Record l : list) {

   if (l.getIdNumber() == idNumber) {

    return l;

   }

  }

return null;

 }

 public void update(int id,String fName,String lName,int contactNumber)

 {

Scanner input=new Scanner(System.in);



  if (find(id)) {

   Record rec = findRecord(id);

   rec.setIdNumber(id);

   rec.setFirstName(fName);

   rec.setLastName(lName);

   rec.setContactNumber(contactNumber);

    Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.INFORMATION);

        a.setContentText("Record Updated Successfully");

        a.show();

 

  }

  else {

   Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.INFORMATION);

        a.setContentText("Record Not Found");

        a.show();

 

  }

 }

 public void display()

 {

	 Stage stage = new Stage();

	 stage.setTitle("Display Person");



	 Text secondText = new Text();

	 String fileContentsStr = "";

	 if (list.isEmpty()) {

		 fileContentsStr = "There is no records";

	 }

	 for (Record record : list)

	 {

		 fileContentsStr+=record.toString()+"\n";

	 }



	 secondText.setText(fileContentsStr);



	 StackPane secondaryLayout = new StackPane();

	 secondaryLayout.getChildren().add(secondText);

	 stage.setScene(new Scene(secondaryLayout, 600, 600));

	 stage.show();



 }

}

public class Examp extends Application {
    
    Record record = new Record();

    PersonRecordManagement pr = new PersonRecordManagement();


    @Override

    public void start(Stage primaryStage) {

        Button btn = new Button();

        btn.setText("Say 'Hello World'");

        btn.setOnAction(new EventHandler<ActionEvent>() {

           

            @Override

            public void handle(ActionEvent event) {

                System.out.println("Person Record Details!");

            }

        });

       

        StackPane root = new StackPane();

        root.getChildren().add(btn);

       

      //  Scene scene = new Scene(root, 300, 250);

       

        GridPane grid = new GridPane();

        grid.setAlignment(Pos.CENTER);

        grid.setHgap(10);

        grid.setVgap(10);

        grid.setPadding(new Insets(25, 25, 25, 25));

       

        Text scenetitle = new Text("Person Record");

        scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

        grid.add(scenetitle, 0, 0, 2, 1);



        Label pid = new Label("Person Id:");

        grid.add(pid, 0, 1);



        TextField t1 = new TextField();

        grid.add(t1, 1, 1);



        Label pno = new Label("Person Phone Number:");

        grid.add(pno, 0, 2);



        TextField t2 = new TextField();

        grid.add(t2, 1, 2);

       

        Label fname = new Label("Person First Name: ");

        grid.add(fname, 0, 3);



        TextField t3 = new TextField();

        grid.add(t3, 1, 3);

       

        Label lname = new Label("Person Last Name: ");

        grid.add(lname, 0, 4);



        TextField t4= new TextField();

        grid.add(t4, 1, 4);

       

             

        Button b1=new Button("Add");

        grid.add(b1, 0, 5);

       

        Button b2=new Button("Delete");

        grid.add(b2, 1, 5);

       

        Button b3=new Button("Update");

        grid.add(b3, 0, 6);

       

        Button b4=new Button("Retrive Person by data");

        grid.add(b4, 1, 6);

       

        Button b5=new Button("Display Person");

        grid.add(b5, 0, 7);

       

        Button b6=new Button("Exit");

        grid.add(b6, 1, 7);        

       

       

        final Text actiontarget = new Text();

        grid.add(actiontarget, 1, 6);

       

        Scene scene = new Scene(grid, 700, 675);

        primaryStage.setScene(scene);



        primaryStage.setTitle("Person Record");

        primaryStage.setScene(scene);

        primaryStage.show();

       

        b1.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

       record = new Record(Integer.parseInt(t1.getText()), t3.getText(), t4.getText(), Integer.parseInt(t2.getText()));

       pr.add(record);

       t1.setText("");

       t2.setText("");

       t3.setText("");

       t4.setText("");

       Alert a = new Alert(AlertType.NONE);

       a.setAlertType(AlertType.INFORMATION);

       a.setContentText(record.toString());

       a.show();

       

    }

});

        b2.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

       pr.delete(Integer.parseInt(t1.getText()));

       

       

    }

});

        b3.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

       pr.update(Integer.parseInt(t1.getText()),t3.getText(), t4.getText(), Integer.parseInt(t2.getText()));

     

       

       

    }

});

         b4.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

        if (!(pr.find(Integer.parseInt(t1.getText())))) {

            Alert a = new Alert(AlertType.NONE);

        a.setAlertType(AlertType.INFORMATION);

        a.setContentText("Person id does not exist\n");

        a.show();

     

    }

    }

});

          b5.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

        pr.display();

    }

});

        b6.setOnAction(new EventHandler<ActionEvent>()

        {

   

    public void handle(ActionEvent e)

    {

      System.exit(0);

    }

   

});
    }
    public static void main(String[] args)
    {
        launch(args);
    }
}


